/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

clientsClaim();

// Precache all of the assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing with NetworkFirst strategy
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html
  ({ request, url }) => {
    // If this isn't a navigation, skip
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, skip
    if (fileExtensionRegexp.test(url.pathname)) {
      return false;
    }

    // Return true to signal that we want to use the handler
    return true;
  },
  // Use NetworkFirst strategy for navigation requests
  new NetworkFirst({
    cacheName: 'navigations',
    plugins: [
      // Only cache successful responses (200 status)
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);

// Cache API responses with proper error handling
registerRoute(
  ({ url }) => {
    // Check if this is an API request
    const apiUrl = process.env.REACT_APP_API_URL || '';
    return url.href.includes('/api/') || (apiUrl && url.href.startsWith(apiUrl));
  },
  new StaleWhileRevalidate({
    cacheName: 'api-responses',
    plugins: [
      // Only cache successful responses
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Cache font files
registerRoute(
  ({ url }) => {
    return url.origin.includes('fonts.googleapis.com') || 
           url.origin.includes('fonts.gstatic.com');
  },
  new CacheFirst({
    cacheName: 'google-fonts',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Handle skip waiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    (async () => {
      // Clear all caches to ensure no 404s are cached
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames.map(async (cacheName) => {
          // Delete navigation caches to clear any cached 404s
          if (cacheName.includes('navigations')) {
            await caches.delete(cacheName);
          }
        })
      );
    })()
  );
});

// Custom fetch handler for offline fallback
self.addEventListener('fetch', (event) => {
  // Only intervene for navigation requests
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          // Only use valid responses
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          return response;
        })
        .catch(() => {
          // If offline, try to return cached index.html
          return caches.match('/index.html');
        })
    );
  }
});